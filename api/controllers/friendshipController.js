const friendshipService = require("../services/friendshipService");
const userRepository = require("../repositories/userRepository");
const friendshipRepository = require("../repositories/friendshipRepository");
const { sendFriendRequest } = require("../repositories/notifyRepository");
const { Friendships, User, Notification } = require("../db/dbContext");

exports.getFriendRequests = async (req, res) => {
    console.log("‚û° Controller megh√≠vva!");

    try {
        const { email } = req.body;
        console.log("üì© Kapott email:", email);

        if (!email) {
            console.log("‚ùå Hi√°nyz√≥ email!");
            return res.status(400).json({ error: "Hi√°nyz√≥ email!" });
        }

        const user = await userRepository.getUserByEmail(email);
        console.log("üë§ Felhaszn√°l√≥ az adatb√°zisban:", user);

        if (!user) {
            console.log("‚ùå Felhaszn√°l√≥ nem tal√°lhat√≥!");
            return res.status(404).json({ error: "Felhaszn√°l√≥ nem tal√°lhat√≥!" });
        }

        const formattedRequests = await friendshipService.getFormattedFriendRequests(user.id);
        console.log("üì¨ Lek√©rt √©rtes√≠t√©sek:", formattedRequests);

        res.json(formattedRequests);
    } catch (error) {
        console.error("‚ùå Hiba az √©rtes√≠t√©sek lek√©r√©sekor:", error);
        res.status(500).json({ error: "Hiba az √©rtes√≠t√©sek lek√©r√©sekor!" });
    }
};

exports.createFriendRequest = async (req, res) => {
    console.log("‚û° Bar√°tjel√∂l√©s l√©trehoz√°sa");
    const { id, email, friend_Email } = req.body;

    try {
        if (!id || !email || !friend_Email) {
            throw new Error("Hi√°nyz√≥ adatok a bar√°tjel√∂l√©shez.");
        }

        const friend = await userRepository.getUserByEmail(friend_Email);
        if (!friend) {
            throw new Error("A megadott bar√°t nem tal√°lhat√≥.");
        }

        const existingRequest = await friendshipRepository.getPendingRequests(id, friend.id);
        if (existingRequest.length > 0) {
            throw new Error("M√°r k√ºldt√©l bar√°tjel√∂l√©st ennek a szem√©lynek.");
        }

        // L√©trehozzuk a bar√°tjel√∂l√©st
        const friendship = await Friendships.create({
            user_id: id,
            friend_id: friend.id,
            status: "pending"
        });

        // √ârtes√≠t√©s l√©trehoz√°sa a bejel√∂lt felhaszn√°l√≥nak
        const sender = await Users.findByPk(id);
        await Notification.create({
            user_id: friend.id,
            message: `${sender.name} bejel√∂lt ismer≈ësnek.`
        });

        res.json({ message: "Bar√°tjel√∂l√©s elk√ºldve!", friendship });
    } catch (error) {
        console.error("‚ùå Hiba a bar√°tjel√∂l√©s l√©trehoz√°sakor:", error);
        res.status(500).json({ error: error.message });
    }
};

exports.getUserNotifications = async (req, res) => {
    try {
        const { userId } = req.params;
        if (!userId) {
            return res.status(400).json({ error: "Hi√°nyz√≥ userId param√©ter." });
        }

        const notifications = await Notification.findAll({
            where: { user_id: userId },
            order: [["createdAt", "DESC"]],
        });

        res.json(notifications);
    } catch (error) {
        console.error("‚ùå Hiba az √©rtes√≠t√©sek lek√©r√©sekor:", error);
        res.status(500).json({ error: "Hiba az √©rtes√≠t√©sek lek√©r√©sekor!" });
    }
};
